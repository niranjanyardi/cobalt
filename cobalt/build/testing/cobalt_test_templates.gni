# Copyright 2025 The Cobalt Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

template("cobalt_test") {
  actual_target_name = target_name
  group("${actual_target_name}_group") {
    testonly = true
    deps = [ ":${actual_target_name}_loader($starboard_toolchain)" ]
  }
  shared_library(actual_target_name) {
    output_name = actual_target_name
    forward_variables_from(invoker, "*", TESTONLY_AND_VISIBILITY)
    testonly = true

    # if(defined(invoker.data_deps)) {
    # data_deps += [":${actual_target_name}_loader($starboard_toolchain)"]
    # } else {
    # data_deps = [":${actual_target_name}_loader($starboard_toolchain)"]
    # }
    #         allow_circular_includes_from = [
    #  ":${actual_target_name}_loader($starboard_toolchain)",
    # ]
  }

  if (current_toolchain == starboard_toolchain) {
    executable("${actual_target_name}_loader") {
      # if (actual_target_name == "url_unittests") {
      #   print("yaay")
      # }
      _runtime_deps_file = "$root_out_dir/${actual_target_name}.runtime_deps"
      output_name = "${actual_target_name}_loader"
      sources = [ "//$starboard_path/starboard_loader.cc" ]
      testonly = true

      if (defined(extra_platform_loader_sources)) {
        sources += extra_platform_loader_sources
      }

      if (use_asan) {
        sources += [ "//$starboard_path/sanitizer_options.cc" ]
      }

      out_dir = rebase_path(root_build_dir)
      defines = [
        "SB_LOADER_MODULE=\"$actual_target_name\"",
        "OUT_DIRECTORY=\"${out_dir}\"",
      ]
      configs += [ "//starboard/build/config:starboard_implementation" ]

      ldflags = [
        "-Wl,-rpath=" + rebase_path("$root_build_dir/starboard"),
        "-Wl,-rpath=" + rebase_path("$root_build_dir"),
        "-Wl,-rpath=\$ORIGIN/../lib",
        "-Wl,-rpath=\$ORIGIN",
      ]

      deps = [
        ":$actual_target_name($cobalt_toolchain)",
        "//starboard($starboard_toolchain)",
      ]

      #         allow_circular_includes_from = [
      #   ":${actual_target_name}($cobalt_toolchain)",
      # ]
      write_runtime_deps = _runtime_deps_file
    }
  }
}
