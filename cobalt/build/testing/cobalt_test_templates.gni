template("target_with_platform_configs") {
  target(invoker.target_type, target_name) {
    forward_variables_from(invoker, "*", [ "target_type" ])
  }
}

template("cobalt_test") {
  actual_target_name = target_name

  target_with_platform_configs(actual_target_name) {
    output_name = actual_target_name
    target_type = "shared_library"
    forward_variables_from(invoker,
                           "*",
                           TESTONLY_AND_VISIBILITY + [ "use_xvfb" ])
    forward_variables_from(invoker, [ "visibility" ])

    testonly = true
    if (defined(invoker.use_xvfb)) {
      _use_xvfb = invoker.use_xvfb
      not_needed(invoker, [ "_use_xvfb" ])
      print(_use_xvfb)
    }
  }

  if (current_toolchain == starboard_toolchain) {
    executable("${actual_target_name}_loader") {
      output_name = "${actual_target_name}_loader"
      forward_variables_from(invoker, [ "data_deps" ])
      sources = [ "//$starboard_path/starboard_loader.cc" ]
      testonly = true

      # Forwards the "shared_library_target_name" to allow this loader install
      # target to depend the corresponding shared_library install_target outputs.
      # shared_library_target_name = actual_target_name

      if (defined(extra_platform_loader_sources)) {
        sources += extra_platform_loader_sources
      }

      if (use_asan) {
        sources += [ "//$starboard_path/sanitizer_options.cc" ]
      }

      out_dir = rebase_path(root_build_dir)
      defines = [
        "SB_LOADER_MODULE=\"$actual_target_name\"",
        "OUT_DIRECTORY=\"${out_dir}\"",
      ]
      configs += [ "//starboard/build/config:starboard_implementation" ]

      ldflags = [
        "-Wl,-rpath=" + rebase_path("$root_build_dir/starboard"),
        "-Wl,-rpath=" + rebase_path("$root_build_dir"),
        "-Wl,-rpath=\$ORIGIN/../lib",
        "-Wl,-rpath=\$ORIGIN",
      ]

      deps = [
        ":$actual_target_name($cobalt_toolchain)",
        "//starboard($starboard_toolchain)",
      ]
    }
  }
}
